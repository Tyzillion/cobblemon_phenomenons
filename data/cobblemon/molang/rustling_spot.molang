v.npc = q.entity;
t.detection_radius = 4.0;

t.nearby_entities = v.npc.get_nearby_entities(t.detection_radius);

for_each(v.player, t.nearby_entities, {

    (v.player.is_player) ? {
        v.kocatch_combo = v.player.data.kocatch_combo;
        
        (!v.player.in_battle) ? {
            v.player.world.game_time > v.player.get_npc_variable(v.npc, 'rustling_cooldown') ? {
                t.cooldown_time = v.player.world.game_time + 100;
                v.player.set_npc_variable(v.npc, 'rustling_cooldown', t.cooldown_time);
                v.player.save_data();
                t.current_biome = v.npc.biome;
                v.biome_type = 'plains';

                t.biome_list = q.array(
                    'end', 
                    'deep_dark', 
                    'cave', 
                    'dripstone', 
                    'frozen_ocean', 
                    'cold_ocean', 
                    'deep_ocean',
                    'warm_ocean',
                    'lukewarm_ocean',
                    'ocean',
                    'snowy_forest',
                    'cherry_blossom',
                    'bamboo',
                    'forest',
                    'badlands',
                    'desert',
                    'taiga',
                    'tundra',
                    'peak',
                    'highlands',
                    'hills',
                    'plateau',
                    'mountain',
                    'lush',
                    'jungle',
                    'river',
                    'beach',
                    'coast',
                    'island',
                    'swamp',
                    'savanna',
                    'shrubland',
                    'mushroom',
                    'spooky',
                    'magical',
                    'sky_islands',
                    'volcanic',
                    'thermal',
                    'floral',
                    'plains'
                );

                for_each(t.biome, t.biome_list, {
                    t.current_biome.is_in('#cobblemon:is_' + t.biome) ? (v.biome_type = t.biome);
                });

                v.combo_bonus = 0;
                (v.kocatch_combo >= 5) ? (v.combo_bonus = 1);
                (v.kocatch_combo >= 10) ? (v.combo_bonus = 2);
                (v.kocatch_combo >= 20) ? (v.combo_bonus = 3);

                v.selected_pokemon = q.run_script('cobblemon:pokemon_spawns');

                t.pokemon_level = math.random_integer(5, (v.player.party.average_level / 1.5));
                (t.pokemon_level <= 5) ? (t.pokemon_level = 35);
                
                t.level_bonus = 0;
                (v.kocatch_combo >= 10) ? (t.level_bonus = 2);
                (v.kocatch_combo >= 20) ? (t.level_bonus = 5);
                (v.kocatch_combo >= 50) ? (t.level_bonus = 10);
                t.pokemon_level = math.min(t.pokemon_level + t.level_bonus, 100);
                
                t.pokemon_props = v.selected_pokemon + ' lvl=' + t.pokemon_level;

                (v.kocatch_combo >= 60) ? {
                    t.ha_chance = math.random_integer(1, 100);
                    (t.ha_chance <= 10) ? {
                        t.pokemon_props = t.pokemon_props + ' ha';
                        v.player.tell('§d✨ Combo bonus forced a hidden ability encounter!! ✨');
                    };
                };
                
                (v.kocatch_combo >= 100) ? {
                    t.shiny_chance = math.random_integer(1, 100);
                    (t.shiny_chance <= 2) ? {
                        t.pokemon_props = t.pokemon_props + ' s';
                        v.player.tell('§d✨ Combo bonus forced a shiny encounter!! ✨');
                    };
                };

                v.spawned_pokemon = v.player.world.spawn_pokemon(v.npc.x, v.npc.y, v.npc.z, t.pokemon_props);

                v.spawned_pokemon.add_potential_marks('cobblemon:mark_phenomenon');
                
                (v.spawned_pokemon.is_shiny) ? {
                    q.run_command('runmolangscript cobblemon:rustling_shiny_encounter ' + v.player.username);
                };
                
                (v.kocatch_combo >= 50) ? {
                    math.random_integer(1,100) <= 10 ? {
                        v.spawned_pokemon.add_marks('cobblemon:mark_phenomenon');
                    };
                    v.player.tell('§b§lCombo Bonus! §7This Pokemon has a decent chance for a special mark!', true);
                } : {
                    (v.kocatch_combo >= 20) ? {
                        math.random_integer(1,100) <= 5 ? {
                            v.spawned_pokemon.add_marks('cobblemon:mark_phenomenon');
                        };
                        v.player.tell('§b§lCombo Bonus! §7This Pokemon has a good chance for a special mark!', true);
                    };
                };

                v.player.tell('Rarity of Pokemon: ' + v.rarity);
                v.player.tell('§7(Biome: ' + v.biome_type + ')');
                v.player.tell('Pokemon: ' + v.selected_pokemon);

                v.battle_started = v.spawned_pokemon.attempt_wild_battle(v.player);
                
                v.battle_started ? {
                    v.wild_pokemon = v.spawned_pokemon;

                    q.run_command('runmolangscript cobblemon:rustling_combo_check ' + v.player.username);

                    q.run_command('bedrockparticle cobblemon:pokemon_appear ' + v.spawned_pokemon.uuid + ' middle');

                    v.wild_pokemon.run_molang_after('q.run_script(\'cobblemon:flee_animation\')', 2.0);

                    (v.kocatch_combo == 0) ? {
                        v.player.tell('§7Start your combo by catching or defeating this Pokemon!');
                    };
                    
                    q.run_command('tp ' + v.npc.uuid + ' ' + v.npc.x + ' ' + (v.npc.y - 360) + ' ' + v.npc.z);
                    v.npc.damage(1000);
                } : {
                    v.spawned_pokemon.damage(1000);
                };  
            };
        }
    };
});